{"ast":null,"code":"export class TablePattern {\n  constructor(name, api, type, columns) {\n    this.name = name;\n    this.api = api;\n    this.type = type;\n    this.columns = columns;\n  }\n  static columnsFromType(type) {\n    // include subtypes\n    const f = _type => {\n      _type = new _type();\n      const columns = [];\n      for (const key in _type) {\n        if (_type.hasOwnProperty(key)) {\n          const element = _type[key];\n          columns.push({\n            name: key,\n            type: element\n          });\n        }\n      }\n      return columns;\n    };\n    return f(type);\n  }\n  static empty() {\n    return new TablePattern('', '', null, []);\n  }\n}","map":{"version":3,"mappings":"AAAA,OAAM,MAAOA,YAAY;EAMrBC,YAAYC,IAAY,EAAEC,GAAW,EAAEC,IAAS,EAAEC,OAAyC;IACvF,IAAI,CAACH,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,GAAG,GAAGA,GAAG;IACd,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,OAAO,GAAGA,OAAO;EAC1B;EAEA,OAAOC,eAAe,CAACF,IAAS;IAC5B;IACA,MAAMG,CAAC,GAAIC,KAAU,IAAI;MACrBA,KAAK,GAAG,IAAIA,KAAK,EAAE;MACnB,MAAMH,OAAO,GAAmC,EAAE;MAClD,KAAK,MAAMI,GAAG,IAAID,KAAK,EAAE;QACrB,IAAIA,KAAK,CAACE,cAAc,CAACD,GAAG,CAAC,EAAE;UAC3B,MAAME,OAAO,GAAGH,KAAK,CAACC,GAAG,CAAC;UAC1BJ,OAAO,CAACO,IAAI,CAAC;YAAEV,IAAI,EAAEO,GAAG;YAAEL,IAAI,EAAEO;UAAO,CAAE,CAAC;;;MAGlD,OAAON,OAAO;IAClB,CAAC;IACD,OAAOE,CAAC,CAACH,IAAI,CAAC;EAClB;EAEA,OAAOS,KAAK;IACR,OAAO,IAAIb,YAAY,CAAC,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,CAAC;EAC7C","names":["TablePattern","constructor","name","api","type","columns","columnsFromType","f","_type","key","hasOwnProperty","element","push","empty"],"sourceRoot":"","sources":["P:\\NURE\\СРБД\\ssdb_lw_4\\ClientApp\\src\\app\\models\\TablePattern.ts"],"sourcesContent":["export class TablePattern {\r\n    public name: string;\r\n    public columns: { name: string, type: string }[];\r\n    public api: string;\r\n    public type: any;\r\n\r\n    constructor(name: string, api: string, type: any, columns: { name: string, type: string }[]) {\r\n        this.name = name;\r\n        this.api = api;\r\n        this.type = type;\r\n        this.columns = columns;\r\n    }\r\n\r\n    static columnsFromType(type: any): { name: string, type: any }[] {\r\n        // include subtypes\r\n        const f = (_type: any) => {\r\n            _type = new _type();\r\n            const columns: { name: string, _type: any }[] = [];\r\n            for (const key in _type) {\r\n                if (_type.hasOwnProperty(key)) {\r\n                    const element = _type[key];\r\n                    columns.push({ name: key, type: element });\r\n                }\r\n            }\r\n            return columns;\r\n        };\r\n        return f(type);\r\n    }\r\n\r\n    static empty() {\r\n        return new TablePattern('', '', null, []);\r\n    }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}