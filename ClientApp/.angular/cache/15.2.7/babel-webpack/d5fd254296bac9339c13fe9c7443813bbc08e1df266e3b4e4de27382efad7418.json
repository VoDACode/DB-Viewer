{"ast":null,"code":"import { throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class SqlApiService {\n  constructor(http) {\n    this.http = http;\n  }\n  getFunctionNames() {\n    return this.http.get('/api/sql/func');\n  }\n  getProcedureNames() {\n    return this.http.get('/api/sql/proc');\n  }\n  getParams(name) {\n    return this.http.get(`/api/sql/params/${name}`);\n  }\n  runProcedure(name, params) {\n    var url = `/api/sql/proc/${name}/call?`;\n    for (var param of params) {\n      if (!param.value) continue;\n      url += `${param.name}=${param.value}&`;\n    }\n    url = url.slice(0, -1);\n    return this.http.get(url, {\n      responseType: \"text\"\n    });\n  }\n  runFunction(name, params) {\n    var url = `/api/sql/func/${name}/call?`;\n    for (var param of params) {\n      if (!param.value) continue;\n      url += `${param.name}=${param.value}&`;\n    }\n    url = url.slice(0, -1);\n    return this.http.get(url, {\n      responseType: \"text\"\n    });\n  }\n  handleError(error) {\n    if (error.status === 0) {\n      alert('An error occurred:' + error.error);\n    } else {\n      alert(error.error);\n    }\n    // Return an observable with a user-facing error message.\n    return throwError(() => new Error('Something bad happened; please try again later.'));\n  }\n}\nSqlApiService.ɵfac = function SqlApiService_Factory(t) {\n  return new (t || SqlApiService)(i0.ɵɵinject(i1.HttpClient));\n};\nSqlApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SqlApiService,\n  factory: SqlApiService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAASA,UAAU,QAAQ,MAAM;;;AAKjC,OAAM,MAAOC,aAAa;EAExBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;EAAgB;EAEjCC,gBAAgB;IACrB,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAW,eAAe,CAAC;EACjD;EAEOC,iBAAiB;IACtB,OAAO,IAAI,CAACH,IAAI,CAACE,GAAG,CAAW,eAAe,CAAC;EACjD;EAEOE,SAAS,CAACC,IAAY;IAC3B,OAAO,IAAI,CAACL,IAAI,CAACE,GAAG,CAAa,mBAAmBG,IAAI,EAAE,CAAC;EAC7D;EAEOC,YAAY,CAACD,IAAY,EAAEE,MAAkB;IAClD,IAAIC,GAAG,GAAG,iBAAiBH,IAAI,QAAQ;IACvC,KAAK,IAAII,KAAK,IAAIF,MAAM,EAAE;MACxB,IAAI,CAACE,KAAK,CAACC,KAAK,EACd;MACFF,GAAG,IAAI,GAAGC,KAAK,CAACJ,IAAI,IAAII,KAAK,CAACC,KAAK,GAAG;;IAExCF,GAAG,GAAGA,GAAG,CAACG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACtB,OAAO,IAAI,CAACX,IAAI,CAACE,GAAG,CAACM,GAAG,EAAE;MACxBI,YAAY,EAAE;KACf,CAAC;EACJ;EAEOC,WAAW,CAACR,IAAY,EAAEE,MAAkB;IACjD,IAAIC,GAAG,GAAG,iBAAiBH,IAAI,QAAQ;IACvC,KAAK,IAAII,KAAK,IAAIF,MAAM,EAAE;MACxB,IAAI,CAACE,KAAK,CAACC,KAAK,EACd;MACFF,GAAG,IAAI,GAAGC,KAAK,CAACJ,IAAI,IAAII,KAAK,CAACC,KAAK,GAAG;;IAExCF,GAAG,GAAGA,GAAG,CAACG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACtB,OAAO,IAAI,CAACX,IAAI,CAACE,GAAG,CAACM,GAAG,EAAE;MACxBI,YAAY,EAAE;KACf,CAAC;EACJ;EAEQE,WAAW,CAACC,KAAwB;IAC1C,IAAIA,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;MACtBC,KAAK,CAAC,oBAAoB,GAAGF,KAAK,CAACA,KAAK,CAAC;KAC1C,MAAM;MACLE,KAAK,CAACF,KAAK,CAACA,KAAK,CAAC;;IAEpB;IACA,OAAOlB,UAAU,CAAC,MAAM,IAAIqB,KAAK,CAAC,iDAAiD,CAAC,CAAC;EACvF;;AAlDWpB,aAAa;mBAAbA,aAAa;AAAA;AAAbA,aAAa;SAAbA,aAAa;EAAAqB,SAAbrB,aAAa;EAAAsB,YAFZ;AAAM","names":["throwError","SqlApiService","constructor","http","getFunctionNames","get","getProcedureNames","getParams","name","runProcedure","params","url","param","value","slice","responseType","runFunction","handleError","error","status","alert","Error","factory","providedIn"],"sourceRoot":"","sources":["P:\\NURE\\СРБД\\ssdb_lw_4\\ClientApp\\src\\app\\services\\sql-api.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { SqlParam } from '../models/SqlParam';\nimport { throwError } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SqlApiService {\n\n  constructor(private http: HttpClient) { }\n\n  public getFunctionNames() {\n    return this.http.get<string[]>('/api/sql/func');\n  }\n\n  public getProcedureNames() {\n    return this.http.get<string[]>('/api/sql/proc');\n  }\n\n  public getParams(name: string) {\n    return this.http.get<SqlParam[]>(`/api/sql/params/${name}`);\n  }\n\n  public runProcedure(name: string, params: SqlParam[]) {\n    var url = `/api/sql/proc/${name}/call?`;\n    for (var param of params) {\n      if (!param.value)\n        continue;\n      url += `${param.name}=${param.value}&`;\n    }\n    url = url.slice(0, -1);\n    return this.http.get(url, {\n      responseType: \"text\"\n    });\n  }\n\n  public runFunction(name: string, params: SqlParam[]) {\n    var url = `/api/sql/func/${name}/call?`;\n    for (var param of params) {\n      if (!param.value)\n        continue;\n      url += `${param.name}=${param.value}&`;\n    }\n    url = url.slice(0, -1);\n    return this.http.get(url, {\n      responseType: \"text\"\n    });\n  }\n\n  private handleError(error: HttpErrorResponse) {\n    if (error.status === 0) {\n      alert('An error occurred:' + error.error);\n    } else {\n      alert(error.error);\n    }\n    // Return an observable with a user-facing error message.\n    return throwError(() => new Error('Something bad happened; please try again later.'));\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}